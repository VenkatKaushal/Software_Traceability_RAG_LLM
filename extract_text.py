import requests
import json

# 1️⃣ Set your Gemini API key
GEMINI_API_KEY = ""
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"

# 2️⃣ Prepare input text
input_text = """
Extract the EA file names and their corresponding class names from the following text.

Return the output as a valid JSON dictionary, where:
- The keys are EA file names (e.g., "EA1.txt", "EA2.txt").
- The values are lists of class names extracted after "<<ANSWER>>".

Input Text:
---
{'EA1.txt': Response(response='<<INSTRUCTIONS>>\nContext information is below:\n---------------------\nClass Name: Entry\n\nMethod Name: PrePayment\nSignature: Entry.PrePayment(long,Vehicle)\nClass Name: Entry\n---------------------\nUsing ONLY this context (no prior knowledge), answer:\n\nWhat are the names of the classes that are related to the following use case requirement?\nA user arrives at the parking facility and selects the entry gate. The system verifies if the fee has been prepaid or requires payment. The user is assigned a parking slot based on vehicle type.\n\nProvide the answer in a list format and provide ONLY the list of class names as a JSON list.\n[<"Class 1 Name">, <"Class 2 Name">, ... <"Class N Name">] where N can be up to 10.\n\n\nDo NOT repeat these instructions.\n<<ANSWER>>\n["Entry"]\n---------------------\nExplanation:\n\nBased on the given context, only the \'Entry\' class is directly related to the provided use case requirement. The \'Entry\' class contains the \'PrePayment\' method which checks if the fee has been prepaid or requires payment. Therefore, it is the only class that needs to be mentioned in the answer.', source_nodes=[NodeWithScore(node=TextNode(id_='ae8f22dc-abf7-471b-bccf-ce7f3e69ad9b', embedding=None, metadata={'File Name': 'Entry.java', 'Class Name': 'Entry', 'methods': "[{'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Entry.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Entry.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PrePayment', 'type': 'Method', 'Signature': 'Entry.PrePayment(long,Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'AssignInTime', 'type': 'Method', 'Signature': 'Entry.AssignInTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}]", 'method_calls': '{}'}, excluded_embed_metadata_keys=['File Name', 'method_calls', 'methods'], excluded_llm_metadata_keys=['File Name', 'method_calls', 'methods'], relationships={<NodeRelationship.SOURCE: '1'>: RelatedNodeInfo(node_id='2b7a54c6-18bd-462a-ab26-9a1bca840f69', node_type='4', metadata={'File Name': 'Entry.java', 'Class Name': 'Entry', 'methods': "[{'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Entry.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Entry.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PrePayment', 'type': 'Method', 'Signature': 'Entry.PrePayment(long,Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'AssignInTime', 'type': 'Method', 'Signature': 'Entry.AssignInTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}]", 'method_calls': '{}'}, hash='74aad1777bb649d2ec02ac7afdd5233bcc133e6223966d3a382612af87e9ec44'), <NodeRelationship.PREVIOUS: '2'>: RelatedNodeInfo(node_id='7ef13a26-124c-4d1c-94de-fa7e543835e7', node_type='1', metadata={'File Name': 'Entry.java', 'Class Name': 'Entry', 'methods': "[{'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Entry.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Entry.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PrePayment', 'type': 'Method', 'Signature': 'Entry.PrePayment(long,Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'AssignInTime', 'type': 'Method', 'Signature': 'Entry.AssignInTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}]", 'method_calls': '{}'}, hash='756fd072cb282313b9ef021b460be2b9723ce2951b4d3600d740a4630c5b6d11'), <NodeRelationship.NEXT: '3'>: RelatedNodeInfo(node_id='eddd98ab-2637-41a8-bd2b-a695884af719', node_type='1', metadata={}, hash='ea6270365996bec008a2bc3c8fbacab61de1c04ab2f3d05d6cf15f5a328abbad')}, metadata_template='{key}: {value}', metadata_separator='\n', text='Method Name: PrePayment\nSignature: Entry.PrePayment(long,Vehicle)\nClass Name: Entry', mimetype='text/plain', start_char_idx=205, end_char_idx=288, metadata_seperator='\n', text_template='{metadata_str}\n\n{content}'), score=0.5278371590289807)], metadata={'ae8f22dc-abf7-471b-bccf-ce7f3e69ad9b': {'File Name': 'Entry.java', 'Class Name': 'Entry', 'methods': "[{'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Entry.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Entry.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PrePayment', 'type': 'Method', 'Signature': 'Entry.PrePayment(long,Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'AssignInTime', 'type': 'Method', 'Signature': 'Entry.AssignInTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}]", 'method_calls': '{}'}}), 'EA2.txt': Response(response='<<INSTRUCTIONS>>\nContext information is below:\n---------------------\nClass Name: Exit\n\nClass Name: Exit\n\n\n\nMethods: \n\nMethod Name: CheckPayment\nSignature: Exit.CheckPayment(Vehicle,int)\nClass Name: Exit\n---------------------\nUsing ONLY this context (no prior knowledge), answer:\n\nWhat are the names of the classes that are related to the following use case requirement?\nThe user proceeds to an exit gate where the system verifies parking duration and generates a bill. Any outstanding fees must be settled before exit approval is granted.\n\nProvide the answer in a list format and provide ONLY the list of class names as a JSON list.\n[<"Class 1 Name">, <"Class 2 Name">, ... <"Class N Name">] where N can be up to 10.\n\n\nDo NOT repeat these instructions.\n<<ANSWER>>\n["Exit"]', source_nodes=[NodeWithScore(node=TextNode(id_='1e544782-77c3-4f4d-bae2-8faf2613c7c9', embedding=None, metadata={'File Name': 'Exit.java', 'Class Name': 'Exit', 'methods': "[{'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Exit.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)'], 'calls': ['Exit.GenerateBill(long,int)']}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'AssignOutTime', 'type': 'Method', 'Signature': 'Exit.AssignOutTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Exit.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'GenerateBill', 'type': 'Method', 'Signature': 'Exit.GenerateBill(long,int)', 'Method Docstring': None, 'called_by': ['Exit.CheckPayment(Vehicle,int)'], 'calls': []}]", 'method_calls': '{}'}, excluded_embed_metadata_keys=['File Name', 'method_calls', 'methods'], excluded_llm_metadata_keys=['File Name', 'method_calls', 'methods'], relationships={<NodeRelationship.SOURCE: '1'>: RelatedNodeInfo(node_id='84420547-10f0-470c-8baa-903a2efcc67e', node_type='4', metadata={'File Name': 'Exit.java', 'Class Name': 'Exit', 'methods': "[{'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Exit.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)'], 'calls': ['Exit.GenerateBill(long,int)']}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'AssignOutTime', 'type': 'Method', 'Signature': 'Exit.AssignOutTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Exit.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'GenerateBill', 'type': 'Method', 'Signature': 'Exit.GenerateBill(long,int)', 'Method Docstring': None, 'called_by': ['Exit.CheckPayment(Vehicle,int)'], 'calls': []}]", 'method_calls': '{}'}, hash='99122077f214a0d8bbc07821b907315ffd625accefb271c1971b02fadc44c2cf'), <NodeRelationship.NEXT: '3'>: RelatedNodeInfo(node_id='e6a1edc8-f3d4-441f-abdf-7a69f59524bc', node_type='1', metadata={}, hash='5a0201fe3c374d3e979c0c53e5aafe0826084cb2297536c84b02f9e3f2007844')}, metadata_template='{key}: {value}', metadata_separator='\n', text='Class Name: Exit\n\n\n\nMethods: \n\nMethod Name: CheckPayment\nSignature: Exit.CheckPayment(Vehicle,int)\nClass Name: Exit', mimetype='text/plain', start_char_idx=0, end_char_idx=115, metadata_seperator='\n', text_template='{metadata_str}\n\n{content}'), score=0.5136607664233149)], metadata={'1e544782-77c3-4f4d-bae2-8faf2613c7c9': {'File Name': 'Exit.java', 'Class Name': 'Exit', 'methods': "[{'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Exit.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)'], 'calls': ['Exit.GenerateBill(long,int)']}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'AssignOutTime', 'type': 'Method', 'Signature': 'Exit.AssignOutTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Exit.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Exit', 'File Name': 'Exit.java', 'Method Name': 'GenerateBill', 'type': 'Method', 'Signature': 'Exit.GenerateBill(long,int)', 'Method Docstring': None, 'called_by': ['Exit.CheckPayment(Vehicle,int)'], 'calls': []}]", 'method_calls': '{}'}}), 'EA3.txt': Response(response='<<INSTRUCTIONS>>\nContext information is below:\n---------------------\nClass Name: Vehicle\n\nClass Name: Vehicle\nAttributes: \nVehicleSpace: int\nAllocatedParkingLot: int\nInTime: long\nOutTime: long\nBillPayed: long\n---------------------\nUsing ONLY this context (no prior knowledge), answer:\n\nWhat are the names of the classes that are related to the following use case requirement?\nThe system dynamically assigns available slots based on vehicle type, ensuring proper space utilization. If no suitable slot is available, the user is prompted to wait or choose another floor.\n\nProvide the answer in a list format and provide ONLY the list of class names as a JSON list.\n[<"Class 1 Name">, <"Class 2 Name">, ... <"Class N Name">] where N can be up to 10.\n\n\nDo NOT repeat these instructions.\n<<ANSWER>>\n["Vehicle"]', source_nodes=[NodeWithScore(node=TextNode(id_='3671db4e-5007-4364-b63d-01479a20e99d', embedding=None, metadata={'File Name': 'Vehicle.java', 'Class Name': 'Vehicle', 'methods': "[{'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'PayFee', 'type': 'Method', 'Signature': 'Vehicle.PayFee()', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'getVehicleSpace', 'type': 'Method', 'Signature': 'Vehicle.getVehicleSpace()', 'Method Docstring': None}, {'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'ChargeVehicle', 'type': 'Method', 'Signature': 'Vehicle.ChargeVehicle(int,int)', 'Method Docstring': None}]", 'method_calls': '{}'}, excluded_embed_metadata_keys=['File Name', 'method_calls', 'methods'], excluded_llm_metadata_keys=['File Name', 'method_calls', 'methods'], relationships={<NodeRelationship.SOURCE: '1'>: RelatedNodeInfo(node_id='a22515d8-8ec6-42ee-8474-2f1f87bf0ea3', node_type='4', metadata={'File Name': 'Vehicle.java', 'Class Name': 'Vehicle', 'methods': "[{'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'PayFee', 'type': 'Method', 'Signature': 'Vehicle.PayFee()', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'getVehicleSpace', 'type': 'Method', 'Signature': 'Vehicle.getVehicleSpace()', 'Method Docstring': None}, {'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'ChargeVehicle', 'type': 'Method', 'Signature': 'Vehicle.ChargeVehicle(int,int)', 'Method Docstring': None}]", 'method_calls': '{}'}, hash='3927ee401463d4b500e8c83a0bb32a4e517c3326c7c4591c0dcb5fb7e0aa44d8'), <NodeRelationship.NEXT: '3'>: RelatedNodeInfo(node_id='0be0edeb-1df9-4314-a822-316b5c355b82', node_type='1', metadata={}, hash='bafc27fe11bef8ee8cf8bc0b582388ce8471a38c00526e2d6b6f2f59482b78cf')}, metadata_template='{key}: {value}', metadata_separator='\n', text='Class Name: Vehicle\nAttributes: \nVehicleSpace: int\nAllocatedParkingLot: int\nInTime: long\nOutTime: long\nBillPayed: long', mimetype='text/plain', start_char_idx=0, end_char_idx=118, metadata_seperator='\n', text_template='{metadata_str}\n\n{content}'), score=0.46649064818957264)], metadata={'3671db4e-5007-4364-b63d-01479a20e99d': {'File Name': 'Vehicle.java', 'Class Name': 'Vehicle', 'methods': "[{'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'PayFee', 'type': 'Method', 'Signature': 'Vehicle.PayFee()', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'getVehicleSpace', 'type': 'Method', 'Signature': 'Vehicle.getVehicleSpace()', 'Method Docstring': None}, {'Class Name': 'Vehicle', 'File Name': 'Vehicle.java', 'Method Name': 'ChargeVehicle', 'type': 'Method', 'Signature': 'Vehicle.ChargeVehicle(int,int)', 'Method Docstring': None}]", 'method_calls': '{}'}}), 'EA4.txt': Response(response='<<INSTRUCTIONS>>\nContext information is below:\n---------------------\nClass Name: Entry\n\nMethod Name: PrePayment\nSignature: Entry.PrePayment(long,Vehicle)\nClass Name: Entry\n---------------------\nUsing ONLY this context (no prior knowledge), answer:\n\nWhat are the names of the classes that are related to the following use case requirement?\nUsers can prepay for parking or pay upon exit using different payment methods (card, attendant, or portal). The system maintains a record of payments and balances.\n\nProvide the answer in a list format and provide ONLY the list of class names as a JSON list.\n[<"Class 1 Name">, <"Class 2 Name">, ... <"Class N Name">] where N can be up to 10.\n\n\nDo NOT repeat these instructions.\n<<ANSWER>>\n["Entry"]', source_nodes=[NodeWithScore(node=TextNode(id_='0141e0b6-ef86-4285-962d-145d0ec326cc', embedding=None, metadata={'File Name': 'Entry.java', 'Class Name': 'Entry', 'methods': "[{'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Entry.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Entry.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PrePayment', 'type': 'Method', 'Signature': 'Entry.PrePayment(long,Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'AssignInTime', 'type': 'Method', 'Signature': 'Entry.AssignInTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}]", 'method_calls': '{}'}, excluded_embed_metadata_keys=['File Name', 'method_calls', 'methods'], excluded_llm_metadata_keys=['File Name', 'method_calls', 'methods'], relationships={<NodeRelationship.SOURCE: '1'>: RelatedNodeInfo(node_id='0ce3f7a5-ff7b-4779-863b-3ab7c4c234a4', node_type='4', metadata={'File Name': 'Entry.java', 'Class Name': 'Entry', 'methods': "[{'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Entry.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Entry.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PrePayment', 'type': 'Method', 'Signature': 'Entry.PrePayment(long,Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'AssignInTime', 'type': 'Method', 'Signature': 'Entry.AssignInTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}]", 'method_calls': '{}'}, hash='74aad1777bb649d2ec02ac7afdd5233bcc133e6223966d3a382612af87e9ec44'), <NodeRelationship.PREVIOUS: '2'>: RelatedNodeInfo(node_id='763e4852-d9b5-444f-8a6d-12dfa24de1c8', node_type='1', metadata={'File Name': 'Entry.java', 'Class Name': 'Entry', 'methods': "[{'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Entry.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Entry.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PrePayment', 'type': 'Method', 'Signature': 'Entry.PrePayment(long,Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'AssignInTime', 'type': 'Method', 'Signature': 'Entry.AssignInTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}]", 'method_calls': '{}'}, hash='756fd072cb282313b9ef021b460be2b9723ce2951b4d3600d740a4630c5b6d11'), <NodeRelationship.NEXT: '3'>: RelatedNodeInfo(node_id='fd1f21f8-8f07-4a83-8646-da67f8557c3f', node_type='1', metadata={}, hash='ea6270365996bec008a2bc3c8fbacab61de1c04ab2f3d05d6cf15f5a328abbad')}, metadata_template='{key}: {value}', metadata_separator='\n', text='Method Name: PrePayment\nSignature: Entry.PrePayment(long,Vehicle)\nClass Name: Entry', mimetype='text/plain', start_char_idx=205, end_char_idx=288, metadata_seperator='\n', text_template='{metadata_str}\n\n{content}'), score=0.5420724958739845)], metadata={'0141e0b6-ef86-4285-962d-145d0ec326cc': {'File Name': 'Entry.java', 'Class Name': 'Entry', 'methods': "[{'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'CheckPayment', 'type': 'Method', 'Signature': 'Entry.CheckPayment(Vehicle,int)', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.CheckPayment(Vehicle,int)']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PaymentOptions', 'type': 'Method', 'Signature': 'Entry.PaymentOptions()', 'Method Docstring': None, 'calls': [], 'called_by': ['Entries_Exits.PaymentOptions()']}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'PrePayment', 'type': 'Method', 'Signature': 'Entry.PrePayment(long,Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}, {'Class Name': 'Entry', 'File Name': 'Entry.java', 'Method Name': 'AssignInTime', 'type': 'Method', 'Signature': 'Entry.AssignInTime(Vehicle)', 'Method Docstring': None, 'calls': [], 'called_by': []}]", 'method_calls': '{}'}}), 'EA5.txt': Response(response='<<INSTRUCTIONS>>\nContext information is below:\n---------------------\nClass Name: ElectricCar\n\nClass Name: ElectricCar\nAttributes: \ncharge: int\n\n\n\nMethods:\n---------------------\nUsing ONLY this context (no prior knowledge), answer:\n\nWhat are the names of the classes that are related to the following use case requirement?\nIf a user parks an electric vehicle, they have the option to charge it. The system calculates the cost based on units consumed and updates the final bill accordingly.\n\nProvide the answer in a list format and provide ONLY the list of class names as a JSON list.\n[<"Class 1 Name">, <"Class 2 Name">, ... <"Class N Name">] where N can be up to 10.\n\n\nDo NOT repeat these instructions.\n<<ANSWER>>\n["ElectricCar"]', source_nodes=[NodeWithScore(node=TextNode(id_='d34b2b56-7280-4e1a-b549-3a60f7797217', embedding=None, metadata={'File Name': 'ElectricCar.java', 'Class Name': 'ElectricCar', 'methods': '[]', 'method_calls': '{}'}, excluded_embed_metadata_keys=['File Name', 'method_calls', 'methods'], excluded_llm_metadata_keys=['File Name', 'method_calls', 'methods'], relationships={<NodeRelationship.SOURCE: '1'>: RelatedNodeInfo(node_id='042909e5-8bc6-46bc-9286-fe940cd1695e', node_type='4', metadata={'File Name': 'ElectricCar.java', 'Class Name': 'ElectricCar', 'methods': '[]', 'method_calls': '{}'}, hash='fa5cfc30b020d0395d6ed6b599e5b8443bfa80bd1661a31150e2794b5d67b64c')}, metadata_template='{key}: {value}', metadata_separator='\n', text='Class Name: ElectricCar\nAttributes: \ncharge: int\n\n\n\nMethods:', mimetype='text/plain', start_char_idx=0, end_char_idx=60, metadata_seperator='\n', text_template='{metadata_str}\n\n{content}'), score=0.48780445462593686)], metadata={'d34b2b56-7280-4e1a-b549-3a60f7797217': {'File Name': 'ElectricCar.java', 'Class Name': 'ElectricCar', 'methods': '[]', 'method_calls': '{}'}})}  
---
"""

# 3️⃣ Send request to Gemini API
headers = {"Content-Type": "application/json"}
data = {
    "contents": [{"parts": [{"text": input_text}]}]
}

response = requests.post(GEMINI_API_URL, headers=headers, json=data)

# 4️⃣ Parse and display the response
if response.status_code == 200:
    result = response.json()
    generated_text = result["candidates"][0]["content"]["parts"][0]["text"]
    print("✅ Extracted JSON Output:\n", generated_text)
else:
    print(f"⚠️ Error: {response.status_code}, {response.text}")
